
'use client';

/**
 * @fileOverview This file defines a client-side function for generating a persona profile picture.
 */

import { callGeminiApi } from '@/lib/api-key-manager';
import { z } from 'zod';

export const GeneratePersonaProfilePictureInputSchema = z.object({
  personaTraits: z.string(),
});
export type GeneratePersonaProfilePictureInput = z.infer<typeof GeneratePersonaProfilePictureInputSchema>;

export const GeneratePersonaProfilePictureOutputSchema = z.object({
  profilePictureDataUri: z.string(),
});
export type GeneratePersonaProfilePictureOutput = z.infer<typeof GeneratePersonaProfilePictureOutputSchema>;

export async function generatePersonaProfilePicture(input: GeneratePersonaProfilePictureInput): Promise<GeneratePersonaProfilePictureOutput> {
  const prompt = `Create a photorealistic, cinematic portrait of a character up to their mid-body. The character should be facing the camera. The character is described as: ${input.personaTraits}`;

  const requestBody = {
    contents: [{ parts: [{ text: prompt }] }],
    // Explicitly ask the API to use its built-in image generation tool.
    // This is the most reliable way to request an image.
    tools: [{
      "image_generation": {}
    }],
  };

  const response = await callGeminiApi<any>('gemini-1.5-flash:generateContent', requestBody);

  // When the image_generation tool is used, the API returns the image data
  // inside a 'functionResponse' part.
  const imageGenerationPart = response.candidates?.[0]?.content?.parts?.find(
    (part: any) => part.functionResponse?.name === 'image_generation'
  );

  const imageDataUri = imageGenerationPart?.functionResponse?.response?.images?.[0]?.dataUri;

  if (imageDataUri) {
    return { profilePictureDataUri: imageDataUri };
  }

  // If image generation fails, the API might return a text explanation.
  const textPart = response.candidates?.[0]?.content?.parts?.find((part: any) => part.text)?.text;
  const reason = textPart ? `API Error: ${textPart}` : 'No image data was generated by the API.';
  
  console.error("Image generation failed. Full API response:", response);
  throw new Error(reason);
}
