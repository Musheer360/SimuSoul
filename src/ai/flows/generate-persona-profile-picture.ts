
'use client';

/**
 * @fileOverview This file defines a client-side function for generating a persona profile picture.
 */

import { callGeminiApi } from '@/lib/api-key-manager';
import { z } from 'zod';

export const GeneratePersonaProfilePictureInputSchema = z.object({
  personaName: z.string(),
  personaTraits: z.string(),
  personaBackstory: z.string(),
});
export type GeneratePersonaProfilePictureInput = z.infer<typeof GeneratePersonaProfilePictureInputSchema>;

export const GeneratePersonaProfilePictureOutputSchema = z.object({
  profilePictureDataUri: z.string(),
});
export type GeneratePersonaProfilePictureOutput = z.infer<typeof GeneratePersonaProfilePictureOutputSchema>;

export async function generatePersonaProfilePicture(input: GeneratePersonaProfilePictureInput): Promise<GeneratePersonaProfilePictureOutput> {
  const prompt = `You are an expert in creating authentic and believable profile pictures. Your task is to generate an image that a real person would use for their social media profile.

The style of the photo should be directly inspired by the character's personality and backstory.
- For a professional or serious persona, create a clean, well-lit headshot.
- For a casual, artistic, or adventurous persona, create a more candid shot, a selfie, or a photo taken in a natural environment (like a cafe, a park, or during a hobby).

**Instructions:**
- Generate a realistic, high-quality headshot or bust-up photo.
- Avoid overly perfect, airbrushed, or stereotypical "stock photo" looks. Aim for authenticity.
- The lighting should be natural or look like it comes from a realistic source.
- The background should be simple or contextually relevant to the character's life or profession.

Use the following details to bring the character to life in their profile picture:

**Character Name:** ${input.personaName}

**Character Vibe & Traits:**
${input.personaTraits}

**Backstory Context:**
${input.personaBackstory}`;

  const requestBody = {
    contents: [{ parts: [{ text: prompt }] }],
    generationConfig: {
      responseModalities: ['TEXT', 'IMAGE'],
    },
  };

  // Use the specified model for image generation, as it's a specialized task.
  const response = await callGeminiApi<any>('gemini-2.0-flash-preview-image-generation:generateContent', requestBody);

  // The model returns image data in an 'inlineData' part.
  const imagePart = response.candidates?.[0]?.content?.parts?.find(
    (part: any) => part.inlineData
  );

  const imageData = imagePart?.inlineData;

  if (imageData?.data && imageData?.mimeType) {
    const dataUri = `data:${imageData.mimeType};base64,${imageData.data}`;
    return { profilePictureDataUri: dataUri };
  }

  // If image generation fails, the API might return a text explanation.
  const textPart = response.candidates?.[0]?.content?.parts?.find((part: any) => part.text)?.text;
  const reason = textPart ? `API Error: ${textPart}` : 'No image data was generated by the API.';
  
  console.error("Image generation failed. Full API response:", response);
  throw new Error(reason);
}
