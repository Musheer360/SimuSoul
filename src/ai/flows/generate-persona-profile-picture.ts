
'use client';

/**
 * @fileOverview This file defines a client-side function for generating a persona profile picture.
 */

import { callGeminiApi } from '@/lib/api-key-manager';
import { z } from 'zod';

export const GeneratePersonaProfilePictureInputSchema = z.object({
  personaTraits: z.string(),
});
export type GeneratePersonaProfilePictureInput = z.infer<typeof GeneratePersonaProfilePictureInputSchema>;

export const GeneratePersonaProfilePictureOutputSchema = z.object({
  profilePictureDataUri: z.string(),
});
export type GeneratePersonaProfilePictureOutput = z.infer<typeof GeneratePersonaProfilePictureOutputSchema>;

export async function generatePersonaProfilePicture(input: GeneratePersonaProfilePictureInput): Promise<GeneratePersonaProfilePictureOutput> {
  const prompt = `Create a photorealistic, cinematic portrait of a character up to their mid-body. The character should be facing the camera. The character is described as: ${input.personaTraits}`;

  const requestBody = {
    contents: [{ parts: [{ text: prompt }] }],
    generationConfig: {
      responseModalities: ['TEXT', 'IMAGE'],
      thinkingConfig: {
        thinkingBudget: 0,
      },
    },
  };

  // Use the specified model for image generation, as it's a specialized task.
  const response = await callGeminiApi<any>('gemini-2.0-flash-preview-image-generation:generateContent', requestBody);

  // The model returns image data in an 'inlineData' part.
  const imagePart = response.candidates?.[0]?.content?.parts?.find(
    (part: any) => part.inlineData
  );

  const imageData = imagePart?.inlineData;

  if (imageData?.data && imageData?.mimeType) {
    const dataUri = `data:${imageData.mimeType};base64,${imageData.data}`;
    return { profilePictureDataUri: dataUri };
  }

  // If image generation fails, the API might return a text explanation.
  const textPart = response.candidates?.[0]?.content?.parts?.find((part: any) => part.text)?.text;
  const reason = textPart ? `API Error: ${textPart}` : 'No image data was generated by the API.';
  
  console.error("Image generation failed. Full API response:", response);
  throw new Error(reason);
}
