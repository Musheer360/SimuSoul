
'use client';

/**
 * @fileOverview This file defines a client-side function for generating a persona profile picture.
 */

import { callGeminiApi } from '@/lib/api-key-manager';
import { z } from 'zod';

export const GeneratePersonaProfilePictureInputSchema = z.object({
  personaTraits: z.string(),
});
export type GeneratePersonaProfilePictureInput = z.infer<typeof GeneratePersonaProfilePictureInputSchema>;

export const GeneratePersonaProfilePictureOutputSchema = z.object({
  profilePictureDataUri: z.string(),
});
export type GeneratePersonaProfilePictureOutput = z.infer<typeof GeneratePersonaProfilePictureOutputSchema>;

export async function generatePersonaProfilePicture(input: GeneratePersonaProfilePictureInput): Promise<GeneratePersonaProfilePictureOutput> {
  const prompt = `Create a photorealistic, cinematic portrait of a character up to their mid-body. The character should be facing the camera. The character is described as: ${input.personaTraits}`;

  const requestBody = {
    contents: [{ parts: [{ text: prompt }] }],
    // No generationConfig needed here because the model can infer from the prompt
    // that an image is being requested and will return a multi-modal response
    // containing the image data in a `fileData` part.
  };

  const response = await callGeminiApi<any>('gemini-1.5-flash:generateContent', requestBody);

  const imagePart = response.candidates?.[0]?.content?.parts?.find(
    (part: any) => part.fileData
  );

  if (!imagePart || !imagePart.fileData?.fileUri) {
      throw new Error('No image data was generated by the API.');
  }

  const { mimeType, fileUri } = imagePart.fileData;
  
  // The fileUri from the API is a complete data URI string (e.g., "data:image/png;base64,...").
  if (fileUri.startsWith('data:')) {
    return { profilePictureDataUri: fileUri };
  }
  
  // Fallback in case the API only returns the base64 part for some reason.
  return { profilePictureDataUri: `data:${mimeType};base64,${fileUri}` };
}
